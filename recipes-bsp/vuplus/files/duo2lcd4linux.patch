diff -urN LCD4linux_ori/plugin.py LCD4linux/plugin.py
--- LCD4linux_ori/plugin.py	2013-05-24 12:11:59.390217149 +0200
+++ LCD4linux/plugin.py	2013-05-31 07:22:41.221330788 +0200
@@ -46,9 +46,12 @@
 
 from twisted.web.client import getPage
 from xml.dom.minidom import parse, parseString
-from urllib import urlencode
+from urllib import urlencode, quote
 import xml.etree.cElementTree
 
+from fcntl import ioctl
+from socket import create_connection as socket_create_connection
+
 # globals
 DPFrefreshrate="/usr/lib/enigma2/python/Plugins/Extensions/LCD4linux/refreshrate"
 WetterPath = "/usr/lib/enigma2/python/Plugins/Extensions/LCD4linux/wetter/"
@@ -80,6 +83,7 @@
 BilderIndexStandby = 0
 BilderTime = 0
 ThreadRunning = 0
+WetterThreadRunning = 0
 LastDemon = ""
 DemonPID = ["","","",""]
 SamsungDevice = None
@@ -204,17 +208,16 @@
 config.plugins.LCD4linux.TimerColor = ConfigSelection(choices = Farbe, default="white")
 config.plugins.LCD4linux.Wetter = ConfigSelection(choices = ScreenSelect, default="0")
 config.plugins.LCD4linux.WetterLCD = ConfigSelection(choices = LCDSelect, default="1")
-config.plugins.LCD4linux.WetterPos = ConfigSlider(default = 50,  increment = 2, limits = (0, 600))
-config.plugins.LCD4linux.WetterType = ConfigSelection(choices = [("1", _("4 Days small")), ("2", _("4 Days big")), ("3", _("Current big")), ("4", _("Current full"))], default="1")
-config.plugins.LCD4linux.OSCAM = ConfigSelection(choices = ScreenSelect, default="0")
-config.plugins.LCD4linux.OSCAMLCD = ConfigSelection(choices = LCDSelect, default="1")
-config.plugins.LCD4linux.OSCAMFile = ConfigText(default="/tmp/.oscam/oscam.lcd", fixed_size=False)
-config.plugins.LCD4linux.OSCAMSize = ConfigSlider(default = 10,  increment = 1, limits = (9, 20))
-config.plugins.LCD4linux.OSCAMPos = ConfigSlider(default = 20,  increment = 2, limits = (0, 600))
-config.plugins.LCD4linux.OSCAMAlign = ConfigSelection(choices = [("0", _("left")), ("2", _("right"))], default="0")
-config.plugins.LCD4linux.OSCAMSplit = ConfigYesNo(default = False)
-config.plugins.LCD4linux.OSCAMColor = ConfigSelection(choices = Farbe, default="white")
-config.plugins.LCD4linux.OSCAMBackColor = ConfigSelection(choices = [("0", _("off"))] + Farbe, default="black")
+config.plugins.LCD4linux.WetterPosX = ConfigSlider(default = 0,  increment = 2, limits = (0, 600))
+config.plugins.LCD4linux.WetterPosY = ConfigSlider(default = 0,  increment = 2, limits = (0, 600))
+config.plugins.LCD4linux.WetterType = ConfigSelection(choices = [("1", _("2 Days")), ("2", _("4 Days")), ("3", _("4 Days big")), ("4", _("4 Days only")), ("5", _("2 Days vertical"))], default="1")
+config.plugins.LCD4linux.WetterColor = ConfigSelection(choices = Farbe, default="white")
+config.plugins.LCD4linux.WetterColorLow = ConfigSelection(choices = Farbe, default="aquamarine")
+config.plugins.LCD4linux.WetterColorHigh = ConfigSelection(choices = Farbe, default="violet")
+config.plugins.LCD4linux.WetterColorLine = ConfigSelection(choices = Farbe, default="white")
+config.plugins.LCD4linux.WetterColorDay = ConfigSelection(choices = Farbe, default="white")
+config.plugins.LCD4linux.WetterColorCity = ConfigSelection(choices = Farbe, default="white")
+config.plugins.LCD4linux.WetterColorSky = ConfigSelection(choices = Farbe, default="silver")
 config.plugins.LCD4linux.WetterCity = ConfigText(default="Berlin", fixed_size=False)
 config.plugins.LCD4linux.Text = ConfigSelection(choices = ScreenSelect, default="0")
 config.plugins.LCD4linux.TextLCD = ConfigSelection(choices = LCDSelect, default="1")
@@ -298,16 +301,9 @@
 config.plugins.LCD4linux.StandbyTimerColor = ConfigSelection(choices = Farbe, default="white")
 config.plugins.LCD4linux.StandbyWetter = ConfigSelection(choices = ScreenSelect, default="0")
 config.plugins.LCD4linux.StandbyWetterLCD = ConfigSelection(choices = LCDSelect, default="1")
-config.plugins.LCD4linux.StandbyWetterPos = ConfigSlider(default = 50,  increment = 2, limits = (0, 600))
+config.plugins.LCD4linux.StandbyWetterPosX = ConfigSlider(default = 0,  increment = 2, limits = (0, 600))
+config.plugins.LCD4linux.StandbyWetterPosY = ConfigSlider(default = 50,  increment = 2, limits = (0, 600))
 config.plugins.LCD4linux.StandbyWetterType = ConfigSelection(choices = [("1", _("4 Days small")), ("2", _("4 Days big")), ("3", _("Current big")), ("4", _("Current full"))], default="1")
-config.plugins.LCD4linux.StandbyOSCAM = ConfigSelection(choices = ScreenSelect, default="0")
-config.plugins.LCD4linux.StandbyOSCAMLCD = ConfigSelection(choices = LCDSelect, default="1")
-config.plugins.LCD4linux.StandbyOSCAMSize = ConfigSlider(default = 10,  increment = 1, limits = (9, 20))
-config.plugins.LCD4linux.StandbyOSCAMPos = ConfigSlider(default = 20,  increment = 2, limits = (0, 600))
-config.plugins.LCD4linux.StandbyOSCAMAlign = ConfigSelection(choices = [("0", _("left")), ("2", _("right"))], default="0")
-config.plugins.LCD4linux.StandbyOSCAMSplit = ConfigYesNo(default = False)
-config.plugins.LCD4linux.StandbyOSCAMColor = ConfigSelection(choices = Farbe, default="white")
-config.plugins.LCD4linux.StandbyOSCAMBackColor = ConfigSelection(choices = [("0", _("off"))] + Farbe, default="black")
 config.plugins.LCD4linux.StandbyText = ConfigSelection(choices = ScreenSelect, default="0")
 config.plugins.LCD4linux.StandbyTextLCD = ConfigSelection(choices = LCDSelect, default="1")
 config.plugins.LCD4linux.StandbyTextFile = ConfigText(default="/tmp/lcd4linux.txt", fixed_size=False)
@@ -752,18 +748,16 @@
 			self.list2.append(getConfigListEntry(_("Weather"), config.plugins.LCD4linux.Wetter))
 			if config.plugins.LCD4linux.Wetter.value != "0":
 				self.list2.append(getConfigListEntry(_("- which LCD"), config.plugins.LCD4linux.WetterLCD))
-				self.list2.append(getConfigListEntry(_("- Position"), config.plugins.LCD4linux.WetterPos))
+				self.list2.append(getConfigListEntry(_("- Position X"), config.plugins.LCD4linux.WetterPosX))
+				self.list2.append(getConfigListEntry(_("- Position Y"), config.plugins.LCD4linux.WetterPosY))
 				self.list2.append(getConfigListEntry(_("- Weather Type"), config.plugins.LCD4linux.WetterType))
-			self.list2.append(getConfigListEntry(_("Show oscam.lcd"), config.plugins.LCD4linux.OSCAM))
-			if config.plugins.LCD4linux.OSCAM.value != "0":
-				self.list2.append(getConfigListEntry(_("- which LCD"), config.plugins.LCD4linux.OSCAMLCD))
-				self.list2.append(getConfigListEntry(_("- File"), config.plugins.LCD4linux.OSCAMFile))
-				self.list2.append(getConfigListEntry(_("- Font Size"), config.plugins.LCD4linux.OSCAMSize))
-				self.list2.append(getConfigListEntry(_("- Position"), config.plugins.LCD4linux.OSCAMPos))
-				self.list2.append(getConfigListEntry(_("- Alignment"), config.plugins.LCD4linux.OSCAMAlign))
-				self.list2.append(getConfigListEntry(_("- Split Screen"), config.plugins.LCD4linux.OSCAMSplit))
-				self.list2.append(getConfigListEntry(_("- Color"), config.plugins.LCD4linux.OSCAMColor))
-				self.list2.append(getConfigListEntry(_("- Background Color"), config.plugins.LCD4linux.OSCAMBackColor))
+				self.list2.append(getConfigListEntry(_("- Color"), config.plugins.LCD4linux.WetterColor))
+				self.list2.append(getConfigListEntry(_("- Color Low"), config.plugins.LCD4linux.WetterColorLow))
+				self.list2.append(getConfigListEntry(_("- Color High"), config.plugins.LCD4linux.WetterColorHigh))
+				self.list2.append(getConfigListEntry(_("- Color Line"), config.plugins.LCD4linux.WetterColorLine))
+				self.list2.append(getConfigListEntry(_("- Color Day"), config.plugins.LCD4linux.WetterColorDay))
+				self.list2.append(getConfigListEntry(_("- Color City"), config.plugins.LCD4linux.WetterColorCity))
+				self.list2.append(getConfigListEntry(_("- Color Sky"), config.plugins.LCD4linux.WetterColorSky))
 			self.list2.append(getConfigListEntry(_("Show Textfile") , config.plugins.LCD4linux.Text))
 			if config.plugins.LCD4linux.Text.value != "0":
 				self.list2.append(getConfigListEntry(_("- which LCD"), config.plugins.LCD4linux.TextLCD))
@@ -868,17 +862,9 @@
 			self.list4.append(getConfigListEntry(_("Standby - Weather"), config.plugins.LCD4linux.StandbyWetter))
 			if config.plugins.LCD4linux.StandbyWetter.value != "0":
 				self.list4.append(getConfigListEntry(_("- which LCD"), config.plugins.LCD4linux.StandbyWetterLCD))
-				self.list4.append(getConfigListEntry(_("- Position"), config.plugins.LCD4linux.StandbyWetterPos))
+				self.list4.append(getConfigListEntry(_("- Position X"), config.plugins.LCD4linux.StandbyWetterPosX))
+				self.list4.append(getConfigListEntry(_("- Position Y"), config.plugins.LCD4linux.StandbyWetterPosY))
 				self.list4.append(getConfigListEntry(_("- Weather Type"), config.plugins.LCD4linux.StandbyWetterType))
-			self.list4.append(getConfigListEntry(_("Standby - Show oscam.lcd"), config.plugins.LCD4linux.StandbyOSCAM))
-			if config.plugins.LCD4linux.StandbyOSCAM.value != "0":
-				self.list4.append(getConfigListEntry(_("- which LCD"), config.plugins.LCD4linux.StandbyOSCAMLCD))
-				self.list4.append(getConfigListEntry(_("- Font Size"), config.plugins.LCD4linux.StandbyOSCAMSize))
-				self.list4.append(getConfigListEntry(_("- Position"), config.plugins.LCD4linux.StandbyOSCAMPos))
-				self.list4.append(getConfigListEntry(_("- Alignment"), config.plugins.LCD4linux.StandbyOSCAMAlign))
-				self.list4.append(getConfigListEntry(_("- Split Screen"), config.plugins.LCD4linux.StandbyOSCAMSplit))
-				self.list4.append(getConfigListEntry(_("- Color"), config.plugins.LCD4linux.StandbyOSCAMColor))
-				self.list4.append(getConfigListEntry(_("- Background Color"), config.plugins.LCD4linux.StandbyOSCAMBackColor))
 			self.list4.append(getConfigListEntry(_("Standby - Show Textfile"), config.plugins.LCD4linux.StandbyText))
 			if config.plugins.LCD4linux.StandbyText.value != "0":
 				self.list4.append(getConfigListEntry(_("- which LCD"), config.plugins.LCD4linux.StandbyTextLCD))
@@ -998,11 +984,18 @@
 			self.SavePicon = config.plugins.LCD4linux.PiconType.value
 			self.SaveAspectRatio = config.plugins.LCD4linux.PiconAspectRatio.value
 			os.system("rm -f %s" % config.plugins.LCD4linux.PiconCache.value + "*.png")
-		if self.SaveWetter != config.plugins.LCD4linux.WetterCity.value or self.SaveWetterType != config.plugins.LCD4linux.WetterType.value or self.SaveStandbyWetterType != config.plugins.LCD4linux.StandbyWetterType.value:
+#		if self.SaveWetter != config.plugins.LCD4linux.WetterCity.value or self.SaveWetterType != config.plugins.LCD4linux.WetterType.value or self.SaveStandbyWetterType != config.plugins.LCD4linux.StandbyWetterType.value:
+#			self.SaveWetter = config.plugins.LCD4linux.WetterCity.value
+#			self.SaveWetterType = config.plugins.LCD4linux.WetterType.value
+#			self.SaveStandbyWetterType = config.plugins.LCD4linux.StandbyWetterType.value
+#			wwwWetter = ""
+		if self.SaveWetter != config.plugins.LCD4linux.WetterCity.value:
 			self.SaveWetter = config.plugins.LCD4linux.WetterCity.value
-			self.SaveWetterType = config.plugins.LCD4linux.WetterType.value
-			self.SaveStandbyWetterType = config.plugins.LCD4linux.StandbyWetterType.value
 			wwwWetter = ""
+
+		elif config.plugins.LCD4linux.WetterColor.isChanged() or config.plugins.LCD4linux.WetterColorLow.isChanged() or config.plugins.LCD4linux.WetterColorHigh.isChanged() or config.plugins.LCD4linux.WetterColorLine.isChanged() or config.plugins.LCD4linux.WetterColorDay.isChanged() or config.plugins.LCD4linux.WetterColorCity.isChanged() or config.plugins.LCD4linux.WetterColorSky.isChanged():
+			if os.path.isfile(PICwetter):
+				os.system("rm -f %s" % PICwetter)
 		if self.SaveScreenActive != config.plugins.LCD4linux.ScreenActive.value:
 			self.SaveScreenActive = config.plugins.LCD4linux.ScreenActive.value
 			ScreenActive = self.SaveScreenActive
@@ -1101,6 +1094,7 @@
 		self.KeyTime = 0
 		self.StandbyChanged = False
 		self.DataMinute = ""
+		self.WetterCheckMin = ""
 		self.ref = ""
 
 		self.StatusTimer = eTimer()
@@ -1210,10 +1204,15 @@
 			self.StandbyChanged = Standby.inStandby 
 			self.restartTimer()
 			if config.plugins.LCD4linux.StandbyWetter.value != "0" or config.plugins.LCD4linux.Wetter.value != "0":
-				if strftime("%M") == "15" or strftime("%M") == "45" or wwwWetter.find("forecast_information") < 1:
-					self.downloadWetter()
+				if strftime("%M") != self.WetterCheckMin:
+					self.WetterCheckMin = strftime("%M")
+					if strftime("%M") == "15" or strftime("%M") == "45" or wwwWetter.find("forecast") < 1:
+						self.downloadWetter()
 		if ConfigMode == True:
-			self.StatusTimer.startLongTimer(2)
+			if config.plugins.LCD4linux.Bild.value.find(ScreenActive) >= 0:
+				self.StatusTimer.startLongTimer(5)
+			else:
+				self.StatusTimer.startLongTimer(3)
 		else:
 			self.StatusTimer.startLongTimer(5)
 
@@ -1377,23 +1376,68 @@
 					ScreenActive = "1"
 		ScreenTime += 1
 
+	def cannotConnect(self, port = 80, url = "74.125.71.94", timeout = 5):
+		try:
+			sock = socket_create_connection((url, port), timeout)
+#			print "Can be connected to [%s:%d]."%(url,port)
+		except Exception, ErrMsg:
+			print "Can't be connected to [%s:%d]. (%s)"%(url, port, ErrMsg)
+			print "    >> Cause: ",ErrMsg
+			return True
+		else:
+#			print "    >> sock close, sock : ",sock
+			if sock is not None:
+				print "socket close : ",sock.close()
+		return False
+
 	def downloadWetter(self):
+		global WetterThreadRunning
+		if WetterThreadRunning > 0:
+			print "[LCD4linux] downloadWetter already running"
+			return
+		WetterThreadRunning += 1
+		from threading import Thread
+		t = Thread(target=self.downloadWetterThread)
+		t.start()
+
+	def downloadWetterThread(self):
+		wetter = 0
+#		if self.cannotConnect(80, "173.194.72.94", 1): # www.google.de
+		if self.cannotConnect(80, "173.194.72.99", 1): # www.google.com
+			self.downloadWetterThreadEnd()
+			return
 		print "[LCD4linux] Wetterdownloadstart"
-		self.feedurl = "http://www.google.com/ig/api?weather=%s&oe=utf-8&hl=%s" % (config.plugins.LCD4linux.WetterCity.value,language.getLanguage()[:2])
-#		self.feedurl = "http://www.google.com/ig/api?weather=%s&oe=utf-8&hl=%s" % (config.plugins.LCD4linux.WetterCity.value,"de")
+		wetterCity = config.plugins.LCD4linux.WetterCity.value
+		lang = language.getLanguage().replace("_","-")
+		if lang in ["no-NO","ca-AD","sr-YU","en-EN"]:
+			lang = "en-us"
+		if wetterCity.startswith("wc:"):
+			self.feedurl = "http://weather.service.msn.com/data.aspx?src=vista&weadegreetype=C&culture=%s&wealocations=%s" %(lang,wetterCity)
+		else:
+			self.feedurl = "http://weather.service.msn.com/data.aspx?src=vista&weadegreetype=C&culture=%s&weasearchstr=%s" %(lang,quote(wetterCity))
 		getPage(self.feedurl).addCallback(self.downloadListCallback).addErrback(self.downloadListError)
+		self.downloadWetterThreadEnd()
 
 	def downloadListError(self, error=""):
-		print str(error)
+		print "download wetter error : ", str(error)
 #		self.session.open(MessageBox, "Error downloading Feed:\n%s" % str(error), type=MessageBox.TYPE_ERROR)
+		self.downloadWetterThreadEnd()
 
 	def downloadListCallback(self, page=""):
 		global wwwWetter
 		wwwWetter = page
 		wwwWetter = wwwWetter.replace('\xc2\x86', '').replace('\xc2\x87', '').replace('\n','').decode("utf-8", "ignore").encode("utf-8") or ""
 		wwwWetter=codecs.decode(wwwWetter, 'UTF-8')
+#		print wwwWetter
 		if os.path.isfile(PICwetter):
 			os.system("rm -f %s" % PICwetter)
+#		print "	>> downloadListCallback updated.."
+		self.downloadWetterThreadEnd()
+		self.restartTimer()
+
+	def downloadWetterThreadEnd(self):
+		global WetterThreadRunning
+		WetterThreadRunning = 0
 
 def LCD4linuxPICThread(self,session):
 	global ThreadRunning
@@ -1530,116 +1574,174 @@
 	global BilderTime
 	global OSDon
 
-# Google Wetter
-	def putWetter(ConfigPos, ConfigType, draw, im):
+# MSN Wetter
+	def putWetter((ConfigPosX, ConfigPosY, ConfigType, ConfigColor, 
+		ConfigColorLow, ConfigColorHigh, ConfigColorLine, ConfigColorDay, ConfigColorCity, ConfigColorSky), draw, im):
+		global wwwWetter
 		global WetterType
+		global WetterThreadRunning
+		if WetterThreadRunning:
+			print " Download Wetter thread is running"
+			return
 		if os.path.isfile(PICwetter) and ConfigType == WetterType:
 			pil_image = Image.open(PICwetter)
-			im.paste(pil_image,(0,ConfigPos))
+			im.paste(pil_image,(ConfigPosX,ConfigPosY))
 		else:
 			WetterType=ConfigType
-			POSX, POSY = 1,0
-			MAX_W,MAX_H = 320,80
-			Wmulti = 1.4 if ConfigType != "1" else 1
-			if ConfigType == "2":
-				MAX_H = 220
-				POSX = 10
+			POSX, POSY = 5,5
+			if ConfigType == "1":
+				MAX_W,MAX_H = 260,110
+			elif ConfigType == "2":
+				MAX_W,MAX_H = 400,110
 			elif ConfigType == "3":
-				MAX_H = 90
-				POSY = POSY-(20*Wmulti)+1
-			elif ConfigType == "4":
-				Wmulti = 3.5
-				MAX_H = 220
-				POSY = POSY-(20*Wmulti)+1
+				MAX_W,MAX_H = 400,240
+			elif ConfigType == "4" or ConfigType == "5":
+				MAX_W,MAX_H = 180,240
 			imW = Image.new('RGB', (MAX_W, MAX_H), (0, 0, 0, 0))
 			drawW = ImageDraw.Draw(imW)
 			dom = parseString(wwwWetter)
-			for node in dom.getElementsByTagName('forecast_information'):
-				for unitsystem in node.getElementsByTagName('unit_system'):
-					UnitSystem = unitsystem.getAttribute('data')
-			if ConfigType != "3" and ConfigType != "4":
-				font = ImageFont.truetype(FONT,20*Wmulti, encoding='unic')
-				Day="?"
-				High="?"
-				Low="?"
-				Icon=""
-				for node in dom.getElementsByTagName('forecast_conditions'):
-					for day_of_week in node.getElementsByTagName('day_of_week'):
-						Day = day_of_week.getAttribute('data')
-					for high in node.getElementsByTagName('high'):
-						High = high.getAttribute('data')
-						if UnitSystem == "US":
-							High = str(int((int(High)-32)*5/9))
-					for low in node.getElementsByTagName('low'):
-						Low = low.getAttribute('data')
-						if UnitSystem == "US":
-							Low = str(int((int(Low)-32)*5/9))
-					for icon in node.getElementsByTagName('icon'):
-						Icon = os.path.basename(icon.getAttribute('data'))
-#					print "WetterData", Day, Low, High, Icon
-					if os.path.isfile(WetterPath + Icon) and Icon.find("gif") > 1:
-						pil_image = Image.open(WetterPath + Icon)
-						if Wmulti != 1:
-							pil_image = pil_image.resize((int(40*Wmulti), int(40*Wmulti)), Image.ANTIALIAS) #BILINEAR)
-#						x,y=pil_image.size
-						imW.paste(pil_image,(POSX,POSY+(20*Wmulti)))
-					w,h = drawW.textsize(Day, font=font)
-					drawW.text((POSX, POSY), Day, font=font)
-					drawW.text((POSX, POSY+(60*Wmulti)), Low, font=font, fill="aquamarine")
-					drawW.text((POSX+(25*Wmulti), POSY+(60*Wmulti)), High, font=font, fill="violet")
-				
-					POSX += (54*Wmulti)
-				if Wmulti != 1:
-					POSX = 10
-					POSY += 90
-				
-			Hum = "?"
-			Wind = "?"
-			Temp_c = "?"
-			Icon=""
-			for node in dom.getElementsByTagName('current_conditions'):
-				for temp_c in node.getElementsByTagName('temp_c'):
-					Temp_c = temp_c.getAttribute('data') + "\xc2\xb0C"
-				for hum in node.getElementsByTagName('humidity'):
-					Hum1 = hum.getAttribute('data').replace("\xc2\xa0","").replace(" ","")
-					Hum1 = Hum1.split(":")
-					if len(Hum1) == 2:	
-						Hum = Hum1[len(Hum1)-1].lstrip()
-				for wind in node.getElementsByTagName('wind_condition'):
-					Wind = wind.getAttribute('data')
-					Wind = Wind.split(":")
-					if len(Wind) == 2:
-						Wind = Wind[len(Wind)-1].lstrip()
-				for icon in node.getElementsByTagName('icon'):
-					Icon = os.path.basename(icon.getAttribute('data'))
-#				print "Temp, Hum", Temp_c, Hum, Wind, Icon
-				if os.path.isfile(WetterPath + Icon) and Icon.find("gif") > 1:
-					pil_image = Image.open(WetterPath + Icon)
-					if Wmulti != 1:
-						pil_image = pil_image.resize((int(40*Wmulti), int(40*Wmulti)), Image.ANTIALIAS) #BILINEAR)
-#					x,y=pil_image.size
-					if ConfigType == "4":
-						POSX = 10
-					imW.paste(pil_image,(POSX,POSY+(20*Wmulti)))
-				if ConfigType == "4":
-					font = ImageFont.truetype(FONT,(10*Wmulti), encoding='unic')
-				else:
-					font = ImageFont.truetype(FONT,(15*Wmulti), encoding='unic')
-				minus5 = 0 if Wmulti != 1 else 5
-				drawW.text((POSX-minus5, POSY+(64*Wmulti)), Wind, font=font, fill="silver")
-				if ConfigType == "4":
-					font = ImageFont.truetype(FONT,(20*Wmulti), encoding='unic')
-				else:
-					font = ImageFont.truetype(FONT,(25*Wmulti), encoding='unic')
-				drawW.text((POSX+(45*Wmulti), POSY+(16*Wmulti)), Temp_c, font=font, fill="violet")
-				if len(Hum)>3:
-					if ConfigType == "4":
-						font = ImageFont.truetype(FONT,(16*Wmulti), encoding='unic')
+			weather = dom.getElementsByTagName("weather")
+			if len(weather) == 0:
+				print "get weather failed"
+				return
+			else:
+				weather = weather[0]
+
+			def getFont(size):
+				return ImageFont.truetype(FONT, size, encoding='unic')
+
+			if ConfigType in ("1","2","3","4","5"):
+# forecast 4 days
+				if ConfigType in ("1","2"):
+					Day="?"; High="?"; Low="?"; Icon=""
+					font = getFont(20)
+					drawW.line((POSX, POSY, POSX, MAX_H), fill=ConfigColorLine)
+					forecast_num = 0
+					for node in weather.getElementsByTagName('forecast'):
+						forecast_num += 1
+						if ConfigType == "1" and forecast_num > 2:
+							break
+						elif ConfigType == "2" and forecast_num > 4:
+							break
+						Day = node.getAttribute('shortday')
+						High = node.getAttribute('high')
+						Low = node.getAttribute('low')
+						Icon = node.getAttribute('skycodeday')
+						Skytextday = node.getAttribute('skytextday')
+						Precip = node.getAttribute('precip')
+						iconpath = WetterPath + Icon+'.png'
+						if os.path.isfile(iconpath):
+							pil_image = Image.open(iconpath)
+							imW.paste(pil_image,(POSX+5,POSY+25), pil_image)
+						drawW.text((POSX+13, POSY), Day, font=font, fill=ConfigColorDay)
+						drawW.text((POSX+10, POSY+71), Low, font=font, fill=ConfigColorLow)
+						drawW.text((POSX+37, POSY+71), High, font=font, fill=ConfigColorHigh)
+						drawW.line((POSX+65, POSY, POSX+65, MAX_H), fill=ConfigColorLine)
+						POSX += 65
+				elif ConfigType in ("3", "4", "5"):
+					Day="?"; High="?"; Low="?"; Icon=""
+					if ConfigType == "5":
+						POSX, POSY = 5,120
+#					if ConfigType in ("3"):
+#						drawW.line((0, 0, MAX_W/2, 0), fill=ConfigColorLine)
+#					elif ConfigType in ("4"):
+#						drawW.line((0, 0, MAX_W, 0), fill=ConfigColorLine)
+					if ConfigType in ("5"):
+						drawW.line((0, POSY, MAX_W, POSY), fill=ConfigColorLine)
+					forecast_num = 0
+					for node in weather.getElementsByTagName('forecast'):
+						forecast_num += 1
+						if ConfigType in ("3", "4") and forecast_num > 4:
+							break
+						elif ConfigType == "5" and forecast_num > 2:
+							break
+						Day = node.getAttribute('day')
+						Low = node.getAttribute('low') + "\xc2\xb0"
+						High = node.getAttribute('high') + "\xc2\xb0"
+						Icon = node.getAttribute('skycodeday')
+						Skytextday = node.getAttribute('skytextday')
+						Precip = node.getAttribute('precip')
+						iconpath = WetterPath + Icon+'.png'
+						if os.path.isfile(iconpath):
+							pil_image = Image.open(iconpath)
+#							icon_w, icon_h = 55,45
+							icon_w, icon_h = int(55*1.2), int(45*1.2)
+							pil_image = pil_image.resize( (icon_w, icon_h), Image.ANTIALIAS) #BILINEAR)
+							imW.paste(pil_image,(POSX, POSY), pil_image)
+						font = getFont(15)
+						drawW.text((POSX+icon_w-20, POSY-2), Precip, font=font, fill="cyan")
+						drawW.text((POSX+icon_w+5, POSY+5), Day, font=font, fill=ConfigColorDay)
+						drawW.text((POSX+icon_w+5, POSY+20), Low, font=font, fill=ConfigColorLow)
+						drawW.text((POSX+icon_w+30, POSY+20), High, font=font, fill=ConfigColorHigh)
+						drawW.text((POSX+icon_w+5, POSY+35), Skytextday, font=font, fill=ConfigColorSky)
+						if ConfigType == "3":
+							drawW.line((POSX, POSY+55, MAX_W/2, POSY+55), fill=ConfigColorLine)
+						else:
+							drawW.line((POSX, POSY+55, MAX_W, POSY+55), fill=ConfigColorLine)
+						POSY += 60
+
+# current info
+				if ConfigType in ("1","2","5"):
+					if ConfigType == "5":
+						POSX, POSY = 15,15
+					Hum = "?"; Wind = "?"; Temp = "?"; Icon=""
+					current = weather.getElementsByTagName('current')
+					if len(current) == 0:
+						print "get current failed"
+					else:
+						current = current[0]
+						ObservationPoint = current.getAttribute('observationpoint')
+						ObservationTime = current.getAttribute('observationtime')
+						Temp = current.getAttribute('temperature') + "\xc2\xb0"
+						Hum = current.getAttribute('humidity') + "%"
+						Wind = current.getAttribute('winddisplay')
+						Icon = current.getAttribute("skycode")
+						iconpath = WetterPath + Icon+'.png'
+						if os.path.isfile(iconpath):
+							pil_image = Image.open(iconpath)
+							pil_image = pil_image.resize((int(55*1.4), int(45*1.4)), Image.ANTIALIAS) #BILINEAR)
+							imW.paste(pil_image,(POSX+5, POSY+5+10), pil_image)
+							drawW.text((POSX+5, POSY), ObservationPoint+' '+ObservationTime, font=getFont(12), fill=ConfigColorCity)
+							drawW.text((POSX+15+62, POSY+5+15), Temp, font=getFont(25), fill=ConfigColorHigh)
+							drawW.text((POSX+15+62, POSY+5+40), Hum, font=getFont(22), fill=ConfigColorLow)
+							drawW.text((POSX+5, POSY+80), Wind, font=getFont(15), fill=ConfigColorSky)
+
+				elif ConfigType in ("3"):
+					POSX, POSY = 200,5
+					drawW.line((POSX, POSY, POSX, MAX_H), fill=ConfigColorLine)
+					Hum = "?"; Wind = "?"; Temp = "?"; Icon=""
+					current = weather.getElementsByTagName('current')
+					if len(current) == 0:
+						print "get current failed"
+						return
 					else:
-						font = ImageFont.truetype(FONT,(22*Wmulti), encoding='unic')
-				drawW.text((POSX+(45*Wmulti), POSY+(37*Wmulti)), Hum, font=font, fill="silver")
+						current = current[0]
+					ObservationPoint = current.getAttribute('observationpoint')
+					ObservationTime = current.getAttribute('observationtime')
+					Temp = 'Temp. : '+ current.getAttribute('temperature') + "\xc2\xb0"
+					Hum = 'Hum : '+ current.getAttribute('humidity') + "%"
+					Wind = 'Wind : '+ current.getAttribute('winddisplay')
+					Icon = current.getAttribute("skycode")
+					Skytext = 'Cond : ' + current.getAttribute('skytext')
+					Feelslike = 'Feel : '+ current.getAttribute('feelslike')
+					Date = 'Date : ' + current.getAttribute('date')
+					iconpath = WetterPath + Icon+'.png'
+					icon_w, icon_h = int(55*2.8), int(45*2.8)
+					if os.path.isfile(iconpath):
+						pil_image = Image.open(iconpath)
+						pil_image = pil_image.resize( (icon_w, icon_h), Image.ANTIALIAS) #BILINEAR
+						imW.paste(pil_image,(POSX+5, POSY+5), pil_image)
+					font = getFont(15)
+					drawW.text((POSX+20, POSY+3+icon_h), Temp, font=font, fill=ConfigColorHigh)
+					drawW.text((POSX+20+80, POSY+3+icon_h), Hum, font=font, fill=ConfigColorLow)
+					drawW.text((POSX+20, POSY+3+icon_h+20), Skytext, font=font, fill=ConfigColorSky)
+					drawW.text((POSX+20, POSY+3+icon_h+40), Wind, font=font, fill=ConfigColorLow)
+					drawW.text((POSX+20, POSY+3+icon_h+60), Date, font=font, fill=ConfigColorCity)
+					font = ImageFont.truetype(FONT,15, encoding='unic')
+					drawW.text((POSX+20, MAX_H-25), ObservationPoint+' '+ObservationTime, font=font, fill=ConfigColorCity)
+# save Image
 			imW.save(PICwetter)
-			im.paste(imW,(0,ConfigPos))
+			im.paste(imW,(ConfigPosX,ConfigPosY))
 		return
 
 # Text File
@@ -1977,51 +2079,6 @@
 		lx = getSplit(ConfigSplit,ConfigAlign,MAX_W,w)
 		draw.text((lx, ConfigPos), i, font=font, fill=ConfigColor)
 
-# show OSCAM
-	def putOSCAM(ConfigPos, ConfigSize, ConfigColor, ConfigBackColor, ConfigAlign, ConfigSplit, draw, im):
-		MAX_W,MAX_H = im.size
-		OSCAMrunning = False
-		if ConfigSplit == True:
-			MAX_W = int(MAX_W/2)
-		POSX = getSplit(ConfigSplit,ConfigAlign,MAX_W,MAX_W)
-		if os.path.isfile(config.plugins.LCD4linux.OSCAMFile.value):
-			current_h=ConfigPos
-			if time()-os.path.getmtime(config.plugins.LCD4linux.OSCAMFile.value) < 30:
-				OSCAMrunning = True
-				font = ImageFont.truetype(FONT, ConfigSize, encoding='unic')
-				p=[160,12.8,3.2,2,1.78,1.6,1.45,1.33]
-
-				f = open(config.plugins.LCD4linux.OSCAMFile.value,"r")
-				for line in f.readlines():
-					line = line.replace('\xc2\x86', '').replace('\xc2\x87', '').replace('\n','').decode("utf-8", "ignore").encode("utf-8") or ""
-					line = codecs.decode(line, 'UTF-8')
-					w,h = draw.textsize(line, font=font)
-					if ConfigBackColor !="0":
-						if line.find(" Label ") > 0:
-							draw.rectangle((POSX, current_h, POSX+MAX_W, current_h+h),fill=ConfigColor)
-						else:
-							draw.rectangle((POSX, current_h, POSX+MAX_W, current_h+h),fill=ConfigBackColor)
-					if line.find("|") >0:
-						ll = line.split("|")
-						if len(ll)==4:
-							p=[160,10.67,2.91,1.14,1.03]
-						elif len(ll)==5:
-							p=[160,10.67,2.91,1.78,1.14,1.03]
-						else:	
-							p=[160,10.67,2.91,1.78,1.6,1.45,1.33,1.14,1.03]
-						for x in range(len(ll)):
-							if line.find(" Label ") > 0:
-								draw.text((POSX+int(MAX_W/p[x]), current_h), ll[x].strip(), font=font, fill=ConfigBackColor)
-							else:
-								draw.text((POSX+int(MAX_W/p[x]), current_h), ll[x].strip(), font=font, fill=ConfigColor)
-						current_h+=h
-				f.close()
-		if OSCAMrunning == False:
-			font = ImageFont.truetype(FONT, ConfigSize+13, encoding='unic')
-			w,h = draw.textsize(codecs.decode(_("OSCAM not running"), 'UTF-8'), font=font)
-			draw.rectangle((POSX, ConfigPos, POSX+MAX_W, ConfigPos+h),fill=ConfigBackColor)
-			draw.text((POSX+(MAX_W-w)/2, ConfigPos), codecs.decode(_("OSCAM not running"), 'UTF-8'), font=font, fill=ConfigColor)
-
 # show Title
 	def putTitle(ConfigPos, ConfigSize, ConfigLines, ConfigColor, ConfigAlign, ConfigSplit, draw, im):
 		MAX_W,MAX_H = im.size
@@ -2110,13 +2167,23 @@
 				if isOffTime(config.plugins.LCD4linux.StandbyLCDoff.value,config.plugins.LCD4linux.StandbyLCDon.value):
 					writeHelligkeit(0)
 					print "[LCD4linux] LCD off"
-# Google Wetter
-			if config.plugins.LCD4linux.StandbyWetter.value.find(ScreenActive) >= 0 and wwwWetter.find("forecast_information") > 1:
+# MSN Wetter
+			if config.plugins.LCD4linux.StandbyWetter.value.find(ScreenActive) >= 0 and wwwWetter.find("forecast") > 1:
+				params = (
+					config.plugins.LCD4linux.StandbyWetterPosX.value,
+					config.plugins.LCD4linux.StandbyWetterPosY.value,
+					config.plugins.LCD4linux.StandbyWetterType.value,
+					config.plugins.LCD4linux.WetterColor.value,
+					config.plugins.LCD4linux.WetterColorLow.value,
+					config.plugins.LCD4linux.WetterColorHigh.value,
+					config.plugins.LCD4linux.WetterColorLine.value,
+					config.plugins.LCD4linux.WetterColorDay.value,
+					config.plugins.LCD4linux.WetterColorCity.value,
+					config.plugins.LCD4linux.WetterColorSky.value)
 				if config.plugins.LCD4linux.StandbyWetterLCD.value.find("1") >= 0:
-					putWetter(config.plugins.LCD4linux.StandbyWetterPos.value,config.plugins.LCD4linux.StandbyWetterType.value,draw,im)
+					putWetter(params, draw, im)
 				if config.plugins.LCD4linux.StandbyWetterLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
-					putWetter(config.plugins.LCD4linux.StandbyWetterPos.value,config.plugins.LCD4linux.StandbyWetterType.value,draw2,im2)
-
+					putWetter(params, draw2, im2)
 # get clock
 			if config.plugins.LCD4linux.StandbyClock.value.find(ScreenActive) >= 0:
 				if config.plugins.LCD4linux.StandbyClockLCD.value.find("1") >= 0:
@@ -2157,12 +2224,6 @@
 					putBild(config.plugins.LCD4linux.StandbyBildPos.value, config.plugins.LCD4linux.StandbyBildSize.value, config.plugins.LCD4linux.StandbyBildAlign.value, ShowPicture, im)
 				if config.plugins.LCD4linux.StandbyBildLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
 					putBild(config.plugins.LCD4linux.StandbyBildPos.value, config.plugins.LCD4linux.StandbyBildSize.value, config.plugins.LCD4linux.StandbyBildAlign.value, ShowPicture, im2)
-# show OSCAM
-			if config.plugins.LCD4linux.StandbyOSCAM.value.find(ScreenActive) >= 0:
-				if config.plugins.LCD4linux.StandbyOSCAMLCD.value.find("1") >= 0:
-					putOSCAM(config.plugins.LCD4linux.StandbyOSCAMPos.value, config.plugins.LCD4linux.StandbyOSCAMSize.value, config.plugins.LCD4linux.StandbyOSCAMColor.value, config.plugins.LCD4linux.StandbyOSCAMBackColor.value, config.plugins.LCD4linux.StandbyOSCAMAlign.value, config.plugins.LCD4linux.StandbyOSCAMSplit.value, draw, im)
-				if config.plugins.LCD4linux.StandbyOSCAMLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
-					putOSCAM(config.plugins.LCD4linux.StandbyOSCAMPos.value, config.plugins.LCD4linux.StandbyOSCAMSize.value, config.plugins.LCD4linux.StandbyOSCAMColor.value, config.plugins.LCD4linux.StandbyOSCAMBackColor.value, config.plugins.LCD4linux.StandbyOSCAMAlign.value, config.plugins.LCD4linux.StandbyOSCAMSplit.value, draw2, im2)
 # show Textfile
 			if config.plugins.LCD4linux.StandbyText.value.find(ScreenActive) >= 0:
 				if config.plugins.LCD4linux.StandbyTextLCD.value.find("1") >= 0:
@@ -2240,12 +2301,23 @@
 				putPicon(config.plugins.LCD4linux.PiconSize.value, config.plugins.LCD4linux.PiconType.value, config.plugins.LCD4linux.PiconAlign.value, config.plugins.LCD4linux.PiconTextSize.value, draw, im)
 			if config.plugins.LCD4linux.PiconLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
 				putPicon(config.plugins.LCD4linux.PiconSize.value, config.plugins.LCD4linux.PiconType.value, config.plugins.LCD4linux.PiconAlign.value, config.plugins.LCD4linux.PiconTextSize.value, draw2, im2)
-# Google Wetter
-		if config.plugins.LCD4linux.Wetter.value.find(ScreenActive) >= 0 and wwwWetter.find("forecast_information") > 1:
+# MSN Wetter
+		if config.plugins.LCD4linux.Wetter.value.find(ScreenActive) >= 0 and wwwWetter.find("forecast") > 1:
+			params = (
+				config.plugins.LCD4linux.WetterPosX.value,
+				config.plugins.LCD4linux.WetterPosY.value,
+				config.plugins.LCD4linux.WetterType.value,
+				config.plugins.LCD4linux.WetterColor.value,
+				config.plugins.LCD4linux.WetterColorLow.value,
+				config.plugins.LCD4linux.WetterColorHigh.value,
+				config.plugins.LCD4linux.WetterColorLine.value,
+				config.plugins.LCD4linux.WetterColorDay.value,
+				config.plugins.LCD4linux.WetterColorCity.value,
+				config.plugins.LCD4linux.WetterColorSky.value)
 			if config.plugins.LCD4linux.WetterLCD.value.find("1") >= 0:
-				putWetter(config.plugins.LCD4linux.WetterPos.value,config.plugins.LCD4linux.WetterType.value,draw,im)
+				putWetter(params, draw, im)
 			if config.plugins.LCD4linux.WetterLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
-				putWetter(config.plugins.LCD4linux.WetterPos.value,config.plugins.LCD4linux.WetterType.value,draw2,im2)
+				putWetter(params, draw2, im2)
 # get clock
 		if config.plugins.LCD4linux.Clock.value.find(ScreenActive) >= 0:
 			if config.plugins.LCD4linux.ClockLCD.value.find("1") >= 0:
@@ -2259,11 +2331,11 @@
 			if config.plugins.LCD4linux.InfoLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
 				putInfo(config.plugins.LCD4linux.InfoPos.value, config.plugins.LCD4linux.InfoSize.value,config.plugins.LCD4linux.InfoAlign.value,config.plugins.LCD4linux.InfoSplit.value,config.plugins.LCD4linux.InfoColor.value,config.plugins.LCD4linux.InfoTuner.value+config.plugins.LCD4linux.InfoSensor.value, draw2, im2)
 # next Timer Record
-			if config.plugins.LCD4linux.Timer.value.find(ScreenActive) >= 0:
-				if config.plugins.LCD4linux.TimerLCD.value.find("1") >= 0:
-					putTimer(config.plugins.LCD4linux.TimerPos.value, config.plugins.LCD4linux.TimerSize.value, config.plugins.LCD4linux.TimerColor.value, draw, im)
-				if config.plugins.LCD4linux.TimerLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
-					putTimer(config.plugins.LCD4linux.TimerPos.value, config.plugins.LCD4linux.TimerSize.value, config.plugins.LCD4linux.TimerColor.value, draw2, im2)
+		if config.plugins.LCD4linux.Timer.value.find(ScreenActive) >= 0:
+			if config.plugins.LCD4linux.TimerLCD.value.find("1") >= 0:
+				putTimer(config.plugins.LCD4linux.TimerPos.value, config.plugins.LCD4linux.TimerSize.value, config.plugins.LCD4linux.TimerColor.value, draw, im)
+			if config.plugins.LCD4linux.TimerLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
+				putTimer(config.plugins.LCD4linux.TimerPos.value, config.plugins.LCD4linux.TimerSize.value, config.plugins.LCD4linux.TimerColor.value, draw2, im2)
 # aktive Sendernummer
 		if config.plugins.LCD4linux.ChannelNum.value.find(ScreenActive) >= 0:
 			if config.plugins.LCD4linux.ChannelNumLCD.value.find("1") >= 0:
@@ -2324,12 +2396,6 @@
 				putBild(config.plugins.LCD4linux.BildPos.value, config.plugins.LCD4linux.BildSize.value, config.plugins.LCD4linux.BildAlign.value, ShowPicture, im)
 			if config.plugins.LCD4linux.BildLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
 				putBild(config.plugins.LCD4linux.BildPos.value, config.plugins.LCD4linux.BildSize.value, config.plugins.LCD4linux.BildAlign.value, ShowPicture, im2)
-# show OSCAM
-		if config.plugins.LCD4linux.OSCAM.value.find(ScreenActive) >= 0:
-			if config.plugins.LCD4linux.OSCAMLCD.value.find("1") >= 0:
-				putOSCAM(config.plugins.LCD4linux.OSCAMPos.value, config.plugins.LCD4linux.OSCAMSize.value, config.plugins.LCD4linux.OSCAMColor.value, config.plugins.LCD4linux.OSCAMBackColor.value, config.plugins.LCD4linux.OSCAMAlign.value, config.plugins.LCD4linux.OSCAMSplit.value, draw, im)
-			if config.plugins.LCD4linux.OSCAMLCD.value.find("2") >= 0 and config.plugins.LCD4linux.LCDType2.value != "00":
-				putOSCAM(config.plugins.LCD4linux.OSCAMPos.value, config.plugins.LCD4linux.OSCAMSize.value, config.plugins.LCD4linux.OSCAMColor.value, config.plugins.LCD4linux.OSCAMBackColor.value, config.plugins.LCD4linux.OSCAMAlign.value, config.plugins.LCD4linux.OSCAMSplit.value, draw2, im2)
 # show Textfile
 		if config.plugins.LCD4linux.Text.value.find(ScreenActive) >= 0:
 			if config.plugins.LCD4linux.TextLCD.value.find("1") >= 0:
@@ -2440,3 +2506,4 @@
 	icon = "plugin.png",
 	fnc = main))
 	return list
+
