From 2db6d9fd47f81e78f574650689084e790fd5f64f Mon Sep 17 00:00:00 2001
From: Captain <captain.onboard@web.de>
Date: Mon, 6 Apr 2015 07:36:44 +0200
Subject: [PATCH] update dags support

---
 gstdvbaudiosink.c | 38 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/gstdvbaudiosink.c b/gstdvbaudiosink.c
index 8db9baa..4457b0e 100644
--- a/gstdvbaudiosink.c
+++ b/gstdvbaudiosink.c
@@ -588,7 +588,11 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		gint format = 0x01;
 		const gchar *formatstring = NULL;
 		gint width = 0, depth = 0, rate = 0, channels, block_align, byterate;
+#ifdef DAGS
+		self->codec_data = gst_buffer_new_and_alloc(18 + 8);
+#else
 		self->codec_data = gst_buffer_new_and_alloc(18);
+#endif
 		GstMapInfo map;
 		gst_buffer_map(self->codec_data, &map, GST_MAP_WRITE);
 		data = map.data;
@@ -618,6 +622,39 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		byterate = channels * rate * width / 8;
 		block_align = channels * width / 8;
 		memset(data, 0, size);
+#ifdef DAGS
+		self->fixed_buffersize      =  rate * 30 / 1000;
+		self->fixed_buffersize      *= channels * depth / 8;
+		self->fixed_buffertimestamp =  GST_CLOCK_TIME_NONE;
+		self->fixed_bufferduration  =  GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+        memcpy(data,"BCMA",4);
+        data[4]  = (self->fixed_buffersize & 0xFF000000) >> 24;
+        data[5]  = (self->fixed_buffersize & 0xFF0000) >> 16; 
+        data[6]  = (self->fixed_buffersize & 0xFF00) >> 8; 
+        data[7]  = (self->fixed_buffersize & 0xFF);
+		/* format tag */
+		data[8]  = format & 0xff;
+		data[9]  = (format >> 8) & 0xff;
+		/* channels */
+		data[10] = channels & 0xff;
+		data[11] = (channels >> 8) & 0xff;
+		/* sample rate */
+		data[12] = rate & 0xff;
+		data[13] = (rate >> 8) & 0xff;
+		data[14] = (rate >> 16) & 0xff;
+		data[15] = (rate >> 24) & 0xff;
+		/* byte rate */
+		data[16] = byterate & 0xff;
+		data[17] = (byterate >> 8) & 0xff;
+		data[18] = (byterate >> 16) & 0xff;
+		data[19] = (byterate >> 24) & 0xff;
+		/* block align */
+		data[20] = block_align & 0xff;
+		data[21] = (block_align >> 8) & 0xff;
+		/* word size */
+		data[22] = depth & 0xff;
+		data[23] = (depth >> 8) & 0xff;
+#else
 		/* format tag */
 		*(data++) = format & 0xff;
 		*(data++) = (format >> 8) & 0xff;
@@ -644,6 +681,7 @@ static gboolean gst_dvbaudiosink_set_caps(GstBaseSink *basesink, GstCaps *caps)
 		self->fixed_buffersize *= channels * depth / 8;
 		self->fixed_buffertimestamp = GST_CLOCK_TIME_NONE;
 		self->fixed_bufferduration = GST_SECOND * (GstClockTime)self->fixed_buffersize / (GstClockTime)byterate;
+#endif
 		GST_INFO_OBJECT(self, "MIMETYPE %s", type);
 		bypass = AUDIOTYPE_RAW;
 		gst_buffer_unmap(self->codec_data, &map);
-- 
1.9.5.msysgit.0

