From fdfd2c245fecb184739f07e12b700bef97f3cd12 Mon Sep 17 00:00:00 2001
From: toto <toto_golden@gmx.de>
Date: Wed, 19 Dec 2018 21:52:41 +0100
Subject: [PATCH] Update plugin.py

---
 Blindscan/src/plugin.py |   75 +++++++++++++++++++++--------------------------
 1 file changed, 34 insertions(+), 41 deletions(-)

diff --git a/Blindscan/src/plugin.py b/Blindscan/src/plugin.py
index 13c1e24..e8659e8 100644
--- a/Blindscan/src/plugin.py
+++ b/Blindscan/src/plugin.py
@@ -483,13 +483,22 @@ class Blindscan(ConfigListScreen, Screen):
 				nimconfig = n.config.dvbs
 			else:
 				nimconfig = n.config
-			config_mode = nimconfig.configMode.value
-			if config_mode == "nothing":
-				continue
+			try:
+                        	config_mode = nimconfig.configMode.value
+				if config_mode == "nothing":
+					continue
+			except:
+                                print" no configMode"
+                                print " nimconfig:", nimconfig
+                                config_mode = "simple"
+                        		
 			if len(nimmanager.getSatListForNim(n.slot)) < 1: # empty setup
 				if config_mode in ("advanced", "simple"):
-					config.Nims[n.slot].configMode.value = "nothing"
-					config.Nims[n.slot].configMode.save()
+					try:
+                                        	config.Nims[n.slot].configMode.value = "nothing"
+						config.Nims[n.slot].configMode.save()
+					except:
+                                        	print" no configMode"
 				continue
 			if n.description in _unsupportedNims: # DVB-S NIMs without blindscan hardware or software
 				continue
@@ -1053,8 +1062,6 @@ class Blindscan(ConfigListScreen, Screen):
 					parm.pls_mode = eDVBFrontendParametersSatellite.PLS_Gold
 					parm.is_id = eDVBFrontendParametersSatellite.No_Stream_Id_Filter
 					parm.pls_code = 0
-					if hasattr(parm, "t2mi_plp_id"):
-						parm.t2mi_plp_id = eDVBFrontendParametersSatellite.No_T2MI_PLP_Id
 					self.tmp_tplist.append(parm)
 			elif len(data) >= 10 and self.dataIsGood(data):
 				if data[0] == 'OK':
@@ -1107,9 +1114,7 @@ class Blindscan(ConfigListScreen, Screen):
 					parm.pls_mode = getMisPlsValue(data, 10, eDVBFrontendParametersSatellite.PLS_Gold)
 					parm.is_id = getMisPlsValue(data, 11, eDVBFrontendParametersSatellite.No_Stream_Id_Filter)
 					parm.pls_code = getMisPlsValue(data, 12, 0)
-					if hasattr(parm, "t2mi_plp_id"):
-						parm.t2mi_plp_id = getMisPlsValue(data, 13, eDVBFrontendParametersSatellite.No_T2MI_PLP_Id)
-                    # when blindscan returns 0,0,0 then use defaults...
+					# when blindscan returns 0,0,0 then use defaults...
 					if parm.pls_mode == parm.is_id == parm.pls_code == 0:
 						parm.pls_mode = eDVBFrontendParametersSatellite.PLS_Gold
 						parm.is_id = eDVBFrontendParametersSatellite.No_Stream_Id_Filter
@@ -1213,7 +1218,7 @@ class Blindscan(ConfigListScreen, Screen):
 
 			# Process transponders still in list
 			if self.tmp_tplist != []:
-				self.tmp_tplist = sorted(self.tmp_tplist, key=lambda tp: (tp.frequency, tp.is_id, tp.pls_mode, tp.pls_code)) # tp.t2mi_plp_id can be added here later
+				self.tmp_tplist = sorted(self.tmp_tplist, key=lambda tp: (tp.frequency, tp.is_id, tp.pls_mode, tp.pls_code))
 				blindscanStateList = []
 				for p in self.tmp_tplist:
 					print "[Blindscan][blindscanSessionClose] data: [%d][%d][%d][%d][%d][%d][%d][%d][%d][%d]" % (p.orbital_position, p.polarisation, p.frequency, p.symbol_rate, p.system, p.inversion, p.pilot, p.fec, p.modulation, p.modulation)
@@ -1244,8 +1249,6 @@ class Blindscan(ConfigListScreen, Screen):
 						tp_str += " MIS %d" % p.is_id
 					if p.pls_code > 0:
 						tp_str += " PLS Gold %d" % p.pls_code
-					if hasattr(p, "t2mi_plp_id") and p.t2mi_plp_id > eDVBFrontendParametersSatellite.No_T2MI_PLP_Id:
-						tp_str += " T2MI %d" % p.t2mi_plp_id
 					blindscanStateList.append((tp_str, p))
 
 				self.runtime = int(time() - self.start_time)
@@ -1302,12 +1305,10 @@ class Blindscan(ConfigListScreen, Screen):
 				parm.modulation = x[6]
 				parm.rolloff = x[8]
 				parm.pilot = x[9]
-				if len(x) > 12:
+				if len(x) > 12: # no "else" clause required. Defaults are automatically provided by enigma
 					parm.is_id = x[10]
 					parm.pls_mode = x[11]
 					parm.pls_code = x[12]
-					if hasattr(parm, "t2mi_plp_id") and len(x) > 13:
-						parm.t2mi_plp_id = x[13]
 				tlist.append(parm)
 		return tlist
 
@@ -1318,15 +1319,10 @@ class Blindscan(ConfigListScreen, Screen):
 		for t in tplist:
 			found = False
 			for k in knowntp:
-				if hasattr(t, "t2mi_plp_id"):
-					t2mi_check = t.t2mi_plp_id == eDVBFrontendParametersSatellite.No_T2MI_PLP_Id or t.t2mi_plp_id == k.t2mi_plp_id
-				else:
-					t2mi_check = True # skip check
 				if (t.polarisation % 2) == (k.polarisation % 2) and \
 					abs(t.frequency - k.frequency) < (tolerance*multiplier) and \
 					abs(t.symbol_rate - k.symbol_rate) < (tolerance*multiplier) and \
-					t.is_id == k.is_id and t.pls_code == k.pls_code and t.pls_mode == k.pls_mode and \
-					t2mi_check:
+					t.is_id == k.is_id and t.pls_code == k.pls_code and t.pls_mode == k.pls_mode:
 					tplist[x] = k
 					found = True
 					break
@@ -1343,15 +1339,10 @@ class Blindscan(ConfigListScreen, Screen):
 			t = tplist[i]
 			found = False
 			for k in tplist[i+1:]:
-				if hasattr(t, "t2mi_plp_id"):
-					t2mi_check = t.t2mi_plp_id == eDVBFrontendParametersSatellite.No_T2MI_PLP_Id or t.t2mi_plp_id == k.t2mi_plp_id
-				else:
-					t2mi_check = True # skip check
 				if (t.polarisation % 2) == (k.polarisation % 2) and \
 					abs(t.frequency - k.frequency) < (tolerance*multiplier) and \
 					abs(t.symbol_rate - k.symbol_rate) < (tolerance*multiplier) and \
-					t.is_id == k.is_id and t.pls_code == k.pls_code and t.pls_mode == k.pls_mode and \
-					t2mi_check:
+					t.is_id == k.is_id and t.pls_code == k.pls_code and t.pls_mode == k.pls_mode:
 					found = True
 					break
 			if not found:
@@ -1365,15 +1356,10 @@ class Blindscan(ConfigListScreen, Screen):
 		for t in tplist:
 			isnt_known = True
 			for k in knowntp:
-				if hasattr(t, "t2mi_plp_id"):
-					t2mi_check = t.t2mi_plp_id == eDVBFrontendParametersSatellite.No_T2MI_PLP_Id or t.t2mi_plp_id == k.t2mi_plp_id
-				else:
-					t2mi_check = True # skip check
 				if (t.polarisation % 2) == (k.polarisation % 2) and \
 					abs(t.frequency - k.frequency) < (tolerance*multiplier) and \
 					abs(t.symbol_rate - k.symbol_rate) < (tolerance*multiplier) and \
-					t.is_id == k.is_id and t.pls_code == k.pls_code and t.pls_mode == k.pls_mode and \
-					t2mi_check:
+					t.is_id == k.is_id and t.pls_code == k.pls_code and t.pls_mode == k.pls_mode:
 					isnt_known = False
 					break
 			if isnt_known:
@@ -1506,8 +1492,6 @@ class Blindscan(ConfigListScreen, Screen):
 			if tp.pls_code > 0:
 				tmp_tp.append('pls_mode="%d"' % tp.pls_mode)
 				tmp_tp.append('pls_code="%d"' % tp.pls_code)
-			if hasattr(tp, "t2mi_plp_id") and tp.t2mi_plp_id > eDVBFrontendParametersSatellite.No_T2MI_PLP_Id:
-				tmp_tp.append('t2mi_plp_id="%d"' % tp.t2mi_plp_id)
 			tmp_tp.append('/>\n')
 			xml.append(' '.join(tmp_tp))
 		xml.append('	</sat>\n')
@@ -1526,8 +1510,17 @@ class Blindscan(ConfigListScreen, Screen):
 			self.session.open(Console,_(XML_FILE),["cat %s" % XML_FILE])
 
 	def resetDefaults(self):
-		for key in defaults.keys():
-			getattr(config.blindscan, key).value = defaults[key]
+		config.blindscan.search_type.value = defaults["search_type"]
+		config.blindscan.step_mhz_tbs5925.value = defaults["step_mhz_tbs5925"]
+		config.blindscan.polarization.value = defaults["polarization"]
+		config.blindscan.start_symbol.value = defaults["start_symbol"]
+		config.blindscan.stop_symbol.value = defaults["stop_symbol"]
+		config.blindscan.clearallservices.value = defaults["clearallservices"]
+		config.blindscan.onlyFTA.value = defaults["onlyFTA"]
+		config.blindscan.dont_scan_known_tps.value = defaults["dont_scan_known_tps"]
+		config.blindscan.disable_sync_with_known_tps.value = defaults["dont_scan_known_tps"]
+		config.blindscan.disable_remove_duplicate_tps.value = defaults["disable_remove_duplicate_tps"]
+		config.blindscan.filter_off_adjacent_satellites.value = defaults["filter_off_adjacent_satellites"]
 		self.blindscan_Ku_band_start_frequency.value = self.Ku_band_freq_limits["low"]
 		self.blindscan_Ku_band_stop_frequency.value = self.Ku_band_freq_limits["high"]
 		self.blindscan_C_band_start_frequency.value = self.c_band_freq_limits["default_low"]
@@ -1540,7 +1533,7 @@ class Blindscan(ConfigListScreen, Screen):
 			
 	def setBlueText(self):
 		for key in defaults.keys():
-			if getattr(config.blindscan, key).value != defaults[key]:
+			if eval('config.blindscan.%s.value == defaults["%s"]' % (key, key)) == False:
 				self["key_blue"].setText("Restore defaults")
 				return
 		if self.blindscan_Ku_band_start_frequency.value != self.Ku_band_freq_limits["low"] or \
@@ -1643,7 +1636,7 @@ class Blindscan(ConfigListScreen, Screen):
 		tps = nimmanager.getTransponders(orb_pos)
 		if len(tps) < 1:
 			return False
-		# freq, sr, pol, fec, inv, orb, sys, mod, roll, pilot [, MIS, pls_mode, pls_code, t2mi]
+		# freq, sr, pol, fec, inv, orb, sys, mod, roll, pilot
 		transponder = (tps[0][1] / 1000, tps[0][2] / 1000, tps[0][3], tps[0][4], 2, orb_pos, tps[0][5], tps[0][6], tps[0][8], tps[0][9])
 		if not self.prepareFrontend():
 			print "[Blindscan][startDishMovingIfRotorSat] self.prepareFrontend() failed"
@@ -1686,4 +1679,4 @@ def Plugins(**kwargs):
 		for n in nimmanager.nim_slots:
 			if n.canBeCompatible("DVB-S") and n.description not in _unsupportedNims: # DVB-S NIMs without blindscan hardware or software
 				return PluginDescriptor(name=_("Blind scan"), description=_("Scan satellites for new transponders"), where = PluginDescriptor.WHERE_MENU, fnc=BlindscanSetup)
-	return []
+	return [] 
-- 
1.7.9.5

